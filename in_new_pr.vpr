domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(scope_id: Int) 

predicate m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(scope_id: Int) 

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_do_work() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var _1: Int
  var _2: Ref
  var _4: Ref
  var _5: Int
  var _6: Int
  var _8: Ref
  var _12: Ref
  
  label start
  // ========== start ==========
  // Def path: "source::do_work"
  // Span: source.rs:8:1: 14:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  // Preconditions:
  inhale _1 >= 0 && 18446744073709551615 >= _1
  inhale (!(_1 + 1 < 0 || _1 + 1 > 18446744073709551615) ==>
    _1 + 1 >= 0 &&
    acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(-1), (_1 + 1) /
    1)) &&
    !(_1 + 1 < 0 || _1 + 1 > 18446744073709551615)
  label pre
  // tick call
  exhale acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(-1), 1 /
    1)
  inhale acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(-1), 1 /
    1)
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] _2 = const 0_usize
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_int, write)
  _2.val_int := 0
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] goto -> bb1
  // ========== loop1_start ==========
  // ========== loop1_group1_bb1 ==========
  // This is a loop head
  __t1 := true
  // [mir] falseUnwind -> [real: bb2, cleanup: bb9]
  // ========== loop1_group1_bb2 ==========
  __t2 := true
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _2
  _5 := builtin$havoc_int()
  _5 := _2.val_int
  label l0
  // [mir] StorageLive(_6)
  // [mir] _6 = _1
  _6 := builtin$havoc_int()
  inhale _1 >= 0 && 18446744073709551615 >= _1
  _6 := _1
  label l1
  // [mir] _4 = Lt(move _5, move _6)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_bool, write)
  _4.val_bool := _5 < _6
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] switchInt(move _4) -> [0: bb8, otherwise: bb3]
  __t8 := _4.val_bool
  if (__t8) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l3 ==========
  // MIR edge bb2 --> bb3
  // ========== loop1_group2_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb5, otherwise: bb4]
  __t9 := _8.val_bool
  // Ignore default target bb4, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb1)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  assert _1 >= 0 && 18446744073709551615 >= _1
  // obtain ((_1) >= (0)) && ((18446744073709551615) >= (_1))
  inhale _1 >= 0 && 18446744073709551615 >= _1
  unfold acc(usize(_2), write)
  exhale (!(_1 - _2.val_int < 0 || _1 - _2.val_int > 18446744073709551615) ==>
    _2.val_int >= 0 &&
    acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(-1), _2.val_int /
    1) &&
    (_1 - _2.val_int >= 0 &&
    acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(-1), (_1 -
    _2.val_int) /
    1))) &&
    !(_1 - _2.val_int < 0 || _1 - _2.val_int > 18446744073709551615)
  assert _1 >= 0 && 18446744073709551615 >= _1
  fold acc(usize(_2), write)
  exhale acc(usize(_2), write) && (_1 >= 0 && 18446744073709551615 >= _1)
  _12 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _4 := builtin$havoc_ref()
  _5 := builtin$havoc_int()
  _6 := builtin$havoc_int()
  _8 := builtin$havoc_ref()
  __t1 := builtin$havoc_bool()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  // ========== loop1_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb1
  inhale acc(usize(_2), write) && (_1 >= 0 && 18446744073709551615 >= _1)
  // ========== loop1_group2a_bb1 ==========
  // This is a loop head
  __t1 := true
  // [mir] falseUnwind -> [real: bb2, cleanup: bb9]
  // ========== loop1_group2a_bb2 ==========
  __t2 := true
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _2
  _5 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _5 := _2.val_int
  label l4
  // [mir] StorageLive(_6)
  // [mir] _6 = _1
  _6 := builtin$havoc_int()
  inhale _1 >= 0 && 18446744073709551615 >= _1
  _6 := _1
  label l5
  // [mir] _4 = Lt(move _5, move _6)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_bool, write)
  _4.val_bool := _5 < _6
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] switchInt(move _4) -> [0: bb8, otherwise: bb3]
  __t10 := _4.val_bool
  if (__t10) {
    goto loop1_group1_bb1
  }
  goto loop1_start
  
  label l2
  // ========== bb8 ==========
  __t7 := true
  // [mir] StorageLive(_14)
  // [mir] _0 = const ()
  // [mir] StorageDead(_14)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_2)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l14
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Exhale functional specification of postcondition
  exhale (!(old[pre](_1) + 1 < 0 || old[pre](_1) + 1 > 18446744073709551615) ==>
    old[pre](_1) + 1 >= 0 &&
    acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(-1), (old[pre](_1) +
    1) /
    1)) &&
    !(old[pre](_1) + 1 < 0 || old[pre](_1) + 1 > 18446744073709551615)
  // Assert that no obligations are leaked
  // Assert type invariants
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l3
  // ========== l12 ==========
  // MIR edge bb2 --> bb3
  // ========== loop1_group5_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb5, otherwise: bb4]
  __t14 := _8.val_bool
  // Ignore default target bb4, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb1)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  assert _1 >= 0 && 18446744073709551615 >= _1
  // obtain ((_1) >= (0)) && ((18446744073709551615) >= (_1))
  inhale _1 >= 0 && 18446744073709551615 >= _1
  unfold acc(usize(_2), write)
  exhale (!(_1 - _2.val_int < 0 || _1 - _2.val_int > 18446744073709551615) ==>
    _2.val_int >= 0 &&
    (acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(-1), _2.val_int /
    1) &&
    acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(1), _2.val_int /
    1)) &&
    (_1 - _2.val_int >= 0 &&
    (acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(-1), (_1 -
    _2.val_int) /
    1) &&
    acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(1), (_1 -
    _2.val_int) /
    1)))) &&
    !(_1 - _2.val_int < 0 || _1 - _2.val_int > 18446744073709551615)
  assert _1 >= 0 && 18446744073709551615 >= _1
  fold acc(usize(_2), write)
  exhale acc(usize(_2), write) && (_1 >= 0 && 18446744073709551615 >= _1)
  inhale false
  goto end_of_method
  
  label loop1_group1_bb1
  // ========== l7 ==========
  // MIR edge bb2 --> bb3
  // ========== loop1_group2b_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb5, otherwise: bb4]
  __t11 := _8.val_bool
  // Ignore default target bb4, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb1
  inhale (!(_1 - _2.val_int < 0 || _1 - _2.val_int > 18446744073709551615) ==>
    _2.val_int >= 0 &&
    (acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(-1), _2.val_int /
    1) &&
    acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(1), _2.val_int /
    1)) &&
    (_1 - _2.val_int >= 0 &&
    (acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(-1), (_1 -
    _2.val_int) /
    1) &&
    acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(1), (_1 -
    _2.val_int) /
    1)))) &&
    !(_1 - _2.val_int < 0 || _1 - _2.val_int > 18446744073709551615)
  // tick call
  exhale acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(-1), 1 /
    1)
  exhale acc(m_prusti_contracts$$time_credits__$TY$__$int$$$bool$(1), 1 / 1)
  inhale acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(-1), 1 /
    1)
  inhale acc(m_prusti_contracts$$time_receipts__$TY$__$int$$$bool$(1), 1 /
    1)
  // ========== loop1_group3_bb5 ==========
  __t4 := true
  // [mir] _7 = const ()
  // [mir] goto -> bb6
  // ========== loop1_group3_bb6 ==========
  __t5 := true
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] _12 = CheckedAdd(_2, const 1_usize)
  _12 := builtin$havoc_ref()
  inhale acc(_12.tuple_0, write)
  inhale acc(_12.tuple_0.val_int, write)
  inhale acc(_12.tuple_1, write)
  inhale acc(_12.tuple_1.val_bool, write)
  _12.tuple_0.val_int := _2.val_int + 1
  _12.tuple_1.val_bool := _2.val_int + 1 < 0 ||
    _2.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb7, unwind: bb9]
  __t12 := _12.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t12
  // ========== loop1_group3_bb7 ==========
  __t6 := true
  // [mir] _2 = move (_12.0: usize)
  _2 := _12.tuple_0
  label l8
  // [mir] _3 = const ()
  // [mir] StorageDead(_4)
  // [mir] goto -> bb1
  // ========== loop1_group4_bb1 ==========
  // This is a loop head
  __t1 := true
  // [mir] falseUnwind -> [real: bb2, cleanup: bb9]
  // ========== loop1_group4_bb2 ==========
  __t2 := true
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _2
  _5 := builtin$havoc_int()
  _5 := _2.val_int
  label l9
  // [mir] StorageLive(_6)
  // [mir] _6 = _1
  _6 := builtin$havoc_int()
  _6 := _1
  label l10
  // [mir] _4 = Lt(move _5, move _6)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_bool, write)
  _4.val_bool := _5 < _6
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] switchInt(move _4) -> [0: bb8, otherwise: bb3]
  __t13 := _4.val_bool
  if (__t13) {
    goto l3
  }
  goto loop1_group1_bb2
  
  label loop1_group1_bb2
  // ========== l11 ==========
  // MIR edge bb2 --> bb8
  // ========== l13 ==========
  // drop Acc(_12.tuple_1.val_bool, write) (Acc(_12.tuple_1.val_bool, write))
  // drop Acc(_12.tuple_0, write) (Acc(_12.tuple_0, write))
  // drop Acc(_8.val_bool, write) (Acc(_8.val_bool, write))
  // drop Acc(_12.tuple_1, write) (Acc(_12.tuple_1, write))
  goto l2
  
  label loop1_start
  // ========== l6 ==========
  // MIR edge bb2 --> bb8
  goto end_of_method
  
  label return
  // ========== l2 ==========
  // MIR edge bb2 --> bb8
  goto l2
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
